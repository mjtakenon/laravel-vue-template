steps:
  - id: 'pull-image-frontend-build-stage'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker pull ${_IMAGE_FRONTEND_BUILD_STAGE}:latest || exit 0' ]
    waitFor: [ '-' ]
  - id: 'pull-image-app-deploy-stage'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker pull ${_IMAGE_APP_DEPLOY_STAGE}:latest || exit 0' ]
    waitFor: [ '-' ]
  - id: 'pull-image-composer'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker pull ${_COMPOSER_IMAGE_NAME} || exit 0' ]
    waitFor: [ '-' ]
  - id: 'pull-image-node'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker pull ${_NODE_IMAGE_NAME} || exit 0' ]
    waitFor: [ '-' ]

  - id: 'start-cloud-proxy'
    name: 'gcr.io/cloudsql-docker/gce-proxy:1.15'
    args:
      - '/cloud_sql_proxy'
      - '-dir=/cloudsql'
      - '-instances=$_INSTANCE_CONNECTION_NAME'
    volumes:
      - name: cloudsql
        path: /cloudsql
    waitFor: [ '-' ]

# フロントイメージのキャッシュは高いのでお財布に余裕が出るまではやらない
#  - id: 'build-image-frontend-build-stage'
#    name: 'gcr.io/cloud-builders/docker'
#    args: [
#      'build',
#      '-f', './infra/cloudbuild/Dockerfile',
#      '--target', 'frontend_build_stage',
#      '--cache-from', '${_IMAGE_FRONTEND_BUILD_STAGE}',
#      '-t', '${_IMAGE_FRONTEND_BUILD_STAGE}',
#      '.'
#    ]
#    waitFor: [ 'pull-image-frontend-build-stage', 'pull-image-node' ]

  - id: 'build-image-app-deploy-stage'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [
      '-c',
      'docker build -f ./infra/cloudbuild/Dockerfile --target deploy_stage --build-arg APP_ENV=${_APP_ENV} --build-arg DB_PASSWORD=$${DB_PASSWORD} --cache-from ${_IMAGE_APP_DEPLOY_STAGE} -t ${_IMAGE_APP_DEPLOY_STAGE} .' # --cache-from ${_IMAGE_FRONTEND_BUILD_STAGE}
    ]
    secretEnv: [ 'DB_PASSWORD' ]
    waitFor: [ 'pull-image-app-deploy-stage', 'pull-image-composer' ] # , 'build-image-frontend-build-stage'

#  - id: 'push-image-frontend-build-stage'
#    name: 'gcr.io/cloud-builders/docker'
#    entrypoint: 'bash'
#    args: [ '-c', 'docker push ${_IMAGE_FRONTEND_BUILD_STAGE} || exit 0' ]
#    waitFor: [ 'build-image-frontend-build-stage' ]

  - id: 'push-image-app-deploy-stage'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker push ${_IMAGE_APP_DEPLOY_STAGE} || exit 0' ]
    waitFor: [ 'build-image-app-deploy-stage' ]

  - id: 'migrate'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [
      '-c',
      'docker run -v cloudsql:/cloudsql --env DB_PASSWORD=$${DB_PASSWORD} ${_IMAGE_APP_DEPLOY_STAGE} bash -c "php artisan config:clear && php artisan migrate --env=${_ENV} && php artisan db:seed --env=${_ENV}"' # --env DB_SOCKET=${_DB_SOCKET}
    ]
    volumes:
      - name: cloudsql
        path: /cloudsql
    secretEnv: [ 'DB_PASSWORD' ]
    waitFor: [ 'push-image-app-deploy-stage' ]

  - id: 'stop-cloud-proxy'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'docker ps -q --filter ancestor="gcr.io/cloudsql-docker/gce-proxy:1.15" | xargs docker stop'
    waitFor: [ 'migrate' ]

  - id: 'deploy-cloud-run'
    name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', '${_CLOUD_RUN_INSTANCE_NAME}',
      '--image', '${_IMAGE_APP_DEPLOY_STAGE}',
      '--region', 'asia-northeast1'
    ]
    waitFor: [ 'migrate' ]

  - id: 'deploy-cloud-run-jobs'
    name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'beta', 'run', 'jobs', 'update', '${_CLOUD_RUN_JOB_NAME}',
      '--image', '${_IMAGE_APP_DEPLOY_STAGE}',
      '--tasks=1',
      '--region', 'asia-northeast1',
    ]
    waitFor: [ 'migrate' ]

#images:
#  - '${_IMAGE_FRONTEND_BUILD_STAGE}:latest'
#  - '${_IMAGE_APP_DEPLOY_STAGE}:latest'
substitutions:
  _NODE_IMAGE_NAME: 'node:20.10.0-bullseye-slim'
  _COMPOSER_IMAGE_NAME: 'composer:2.5.5'
  _IMAGE_FRONTEND_BUILD_STAGE: 'asia-northeast1-docker.pkg.dev/{project_name}/build-images/develop/cache/frontend_build_stage'
  _IMAGE_APP_DEPLOY_STAGE: 'asia-northeast1-docker.pkg.dev/{project_name}/build-images/develop/app_deploy_stage'
  _CLOUD_RUN_INSTANCE_NAME: '{cloud_run_instance_name}'
  _CLOUD_RUN_JOB_NAME: '{cloud_run_job_name}'
  _INSTANCE_CONNECTION_NAME: '{project_name}:asia-northeast1:{cloud_run_instance_name}'
  _ENV: 'develop'
#  _DB_SOCKET: '/cloudsql/{project_name}:asia-northeast1:{cloud_run_instance_name}'
availableSecrets:
  secretManager:
  - versionName: projects/{project_id}/secrets/{secret_name}/versions/latest
    env: 'DB_PASSWORD'
timeout:
  1800s